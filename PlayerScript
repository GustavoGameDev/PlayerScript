using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class Player : MonoBehaviour
{

    [Header("PlayerSettings")]
    public float speed;
    private Rigidbody2D rb;
    Vector2 moveDirection;
    private Animator anim;

    public int health;


    public Transform weaponPosition;
    [Header("UIPlayerSettings")]
    public Image[] hearths;
    public Sprite fullHearth;
    public Sprite emptyHearth;

    //dash
    [Header("DashSettings")]
    [SerializeField] float dashSpeed = 30;
    [SerializeField] float dashDuration = 1f;
    [SerializeField] float dashCooldown;
    bool isDashing;


    private void Start()
    {
        rb = GetComponent<Rigidbody2D>();
        anim = GetComponent<Animator>();
    }

//movement
    private void Update()
    {

        if (isDashing)
        {
            return;
        }

        float moveX = Input.GetAxisRaw("Horizontal");
        float moveY = Input.GetAxisRaw("Vertical");

        moveDirection = new Vector2(moveX, moveY).normalized;

//animation
        if (moveDirection != Vector2.zero)
        {
            anim.SetBool("isRunning", true);
        }
        else
        {
            anim.SetBool("isRunning", false);
        }
//dash
        if (Input.GetKeyDown(KeyCode.Space))
        {
            StartCoroutine(Dash());
        }

    }

    private void FixedUpdate()
    {
        if (isDashing)
        {
            return;
        }
        rb.velocity = new Vector2(moveDirection.x * speed, moveDirection.y * speed);
    }
//damageSystem
    public void TakeDamage(int damageAmount)
    {
        health -= damageAmount;
        UpdateHealthUi(health);

        if (health <= 0)
        {
            Destroy(this.gameObject);
        }
    }
//WeaponSystem
    public void ChangeWeapon(Weapon weaponToEquip)
    {
        Destroy(GameObject.FindGameObjectWithTag("Weapon"));
        Instantiate(weaponToEquip, weaponPosition.position, transform.rotation, transform);
    }
//HealthSystem
    void UpdateHealthUi(int currentHealth)
    {
        for (int i = 0; i < hearths.Length; i++)
        {
            if(i < currentHealth)
            {
                hearths[i].sprite = fullHearth;
            }
            else
            {
                hearths[i].sprite = emptyHearth;
            }
        }
    }

    public void Heal(int healAmount)
    {
        if(health + healAmount > 5)
        {
            health = 5;
        }
        else
        {
            health += healAmount;
        }
        UpdateHealthUi(health);
    }
//dashSystem
    private IEnumerator Dash()
    {
        isDashing = true;
        rb.velocity = new Vector2(moveDirection.x * dashSpeed, moveDirection.y * dashSpeed);
        yield return new WaitForSeconds(dashDuration);
        isDashing = false;
    }
}
